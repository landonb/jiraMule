#compdef jm

__jm_sub_commands () {
  local -a list
  list=(
      attach:'Attach file to an Issue'
      completion:'Tool for getting bits for tab completion.'
      goto:'Move issue to a status; making multiple transitions if needed'
      help:'Display global or [command] help documentation'
      init:'Initialize a project'
      kanban:'Show a kanban table'
      logwork:'Log work spent'
      mapGoto:'Attempt to build a goto map'
      mapwork:'Store the harvest codes as a label in Jira.'
      next:'Move issue to the next state'
      progress:'Show progress on issues'
      query:'Get the keys from a jira query'
      release:'Little tool for releasing a version in Jira'
      testReady:'Little tool for setting the fix version on testable issues'
  )
  _describe -t sub-commands 'sub commands' list
}

__jm_aliases () {
  local -a list
  list=(
       lw:'Alias for logwork '
       move:'Alias for goto '
       mw:'Alias for mapwork '
       q:'Alias for query '
       qq:'Alias for query '
       status:'Alias for kanban --style status'
       tp:'Alias for kanban --style taskpaper'
    )
  _describe -t aliased-commands 'aliases' list
}

__jm_subcommand () {
  case "$words[1]" in
      (attach)
        _arguments \
            {-z,--zip}"[Zip the file[s] first]: :" \

        ;;

      (completion)
        _arguments \
            "--subs[List sub commands]: :" \
            "--opts=[List options for subcommand]: :" \
            "--gopts[List global options]: :" \

        ;;

      (goto)
        _arguments \
            {-m,--map}="[Which workflow map to use]: :" \

        ;;



      (kanban)
        _arguments \
            {--raw,--no-raw}"[Do not prefix queries with project and assignee]: :" \
            {-w,--width}="[Width of the terminal]: :" \
            {-s,--style}="[Which style to use]: :" \
            "--heading=[Format for heading]: :" \
            "--item=[Format for items]: :" \
            {-c,--column}="[]: :" \
            {-f,--fields}="[Which fields to return]: :" \
            {-d,--dump}"[Dump the style to STDOUT as yaml]: :" \
            "--file=[Style definition file to load]: :" \

        ;;

      (logwork)
        _arguments \
            {-m,--message}="[Message to add to work log]: :" \
            "--date=[When this work was done]: :" \

        ;;






      (next)
        _arguments \
            {-m,--map}="[Which workflow map to use]: :" \

        ;;

      (progress)
        _arguments \
            {-s,--status}="[Which status to limit to]: :" \

        ;;



      (query)
        _arguments \
            {--raw,--no-raw}"[Do not prefix query with project and assignee]: :" \
            {--json,--no-json}"[Output json reply instead of summary]: :" \
            "--fields=[Which fields to return. Set to empty to get all fields.]: :" \

        ;;

      (release)
        _arguments \
            "--some-switch[Some switch that does something]: :" \

        ;;


      (testReady)
        _arguments \
            {-r,--reassign,--no-reassign}"[Also reassign to Default]: :" \
            {-a,--assign}="[Assign to USER]: :" \

        ;;


    (*)
      _message 'Unknown sub command'
  esac
}

_jm () {
    local curcontext="$curcontext" state common_options
    common_options=(
            "--verbose[Be chatty]: :"
            {-n,--dry}"[Don't run actions that make changes]: :"
            "--project=[Which project to use]: :"
            "--url=[Set jira base url]: :"
            {-h,--help}"[Display help documentation]: :"
            {-v,--version}"[Display version information]: :"
            {-t,--trace}"[Display backtrace when an error occurs]: :"
    
    )
    _arguments -C \
         ${common_options} \
        '(-): :->command' \
        '(-)*:: :->option-or-argument'
    case $state in
        (command)
            __jm_sub_commands
            __jm_aliases
            ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:jm-$words[1]:
            __jm_subcommand
            ;;
    esac
}


#  vim: set ai et sw=2 ts=2 :
